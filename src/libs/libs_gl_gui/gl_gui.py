# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gl_gui')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gl_gui')
    _gl_gui = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gl_gui', [dirname(__file__)])
        except ImportError:
            import _gl_gui
            return _gl_gui
        try:
            _mod = imp.load_module('_gl_gui', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gl_gui = swig_import_helper()
    del swig_import_helper
else:
    import _gl_gui
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gl_gui.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _gl_gui.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gl_gui.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gl_gui.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gl_gui.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gl_gui.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gl_gui.SwigPyIterator_copy(self)

    def next(self):
        return _gl_gui.SwigPyIterator_next(self)

    def __next__(self):
        return _gl_gui.SwigPyIterator___next__(self)

    def previous(self):
        return _gl_gui.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gl_gui.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gl_gui.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gl_gui.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gl_gui.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gl_gui.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gl_gui.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gl_gui.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _gl_gui.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class LoadTextures(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadTextures, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadTextures, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gl_gui.new_LoadTextures(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gl_gui.delete_LoadTextures
    __del__ = lambda self: None

    def load(self, file_name):
        return _gl_gui.LoadTextures_load(self, file_name)

    def get_textures_count(self):
        return _gl_gui.LoadTextures_get_textures_count(self)

    def get(self, id):
        return _gl_gui.LoadTextures_get(self, id)

    def get_idx(self, idx):
        return _gl_gui.LoadTextures_get_idx(self, idx)
LoadTextures_swigregister = _gl_gui.LoadTextures_swigregister
LoadTextures_swigregister(LoadTextures)

class JsonConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsonConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsonConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result"] = _gl_gui.JsonConfig_result_set
    __swig_getmethods__["result"] = _gl_gui.JsonConfig_result_get
    if _newclass:
        result = _swig_property(_gl_gui.JsonConfig_result_get, _gl_gui.JsonConfig_result_set)

    def __init__(self, *args):
        this = _gl_gui.new_JsonConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gl_gui.delete_JsonConfig
    __del__ = lambda self: None

    def load(self, json_file_name):
        return _gl_gui.JsonConfig_load(self, json_file_name)

    def save(self, file_name):
        return _gl_gui.JsonConfig_save(self, file_name)

    def get_result(self):
        return _gl_gui.JsonConfig_get_result(self)
JsonConfig_swigregister = _gl_gui.JsonConfig_swigregister
JsonConfig_swigregister(JsonConfig)

class GLVisualisation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLVisualisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLVisualisation, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gl_gui.new_GLVisualisation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gl_gui.delete_GLVisualisation
    __del__ = lambda self: None

    def time(self):
        return _gl_gui.GLVisualisation_time(self)

    def init(self, *args):
        return _gl_gui.GLVisualisation_init(self, *args)

    def width(self):
        return _gl_gui.GLVisualisation_width(self)

    def height(self):
        return _gl_gui.GLVisualisation_height(self)

    def start(self):
        return _gl_gui.GLVisualisation_start(self)

    def finish(self):
        return _gl_gui.GLVisualisation_finish(self)

    def push(self):
        return _gl_gui.GLVisualisation_push(self)

    def pop(self):
        return _gl_gui.GLVisualisation_pop(self)

    def translate(self, x, y, z):
        return _gl_gui.GLVisualisation_translate(self, x, y, z)

    def rotate(self, angle_x, angle_y, angle_z):
        return _gl_gui.GLVisualisation_rotate(self, angle_x, angle_y, angle_z)

    def set_color(self, r, g, b):
        return _gl_gui.GLVisualisation_set_color(self, r, g, b)

    def paint_point(self):
        return _gl_gui.GLVisualisation_paint_point(self)

    def paint_square(self, size):
        return _gl_gui.GLVisualisation_paint_square(self, size)

    def paint_rectangle(self, width, height):
        return _gl_gui.GLVisualisation_paint_rectangle(self, width, height)

    def paint_textured_rectangle(self, width, height, texture_id):
        return _gl_gui.GLVisualisation_paint_textured_rectangle(self, width, height, texture_id)

    def paint_line(self, x0, y0, z0, x1, y1, z1):
        return _gl_gui.GLVisualisation_paint_line(self, x0, y0, z0, x1, y1, z1)

    def paint_quad(self, x0, y0, z0, r0, g0, b0, x1, y1, z1, r1, g1, b1, x2, y2, z2, r2, g2, b2, x3, y3, z3, r3, g3, b3):
        return _gl_gui.GLVisualisation_paint_quad(self, x0, y0, z0, r0, g0, b0, x1, y1, z1, r1, g1, b1, x2, y2, z2, r2, g2, b2, x3, y3, z3, r3, g3, b3)

    def paint_cube(self, size):
        return _gl_gui.GLVisualisation_paint_cube(self, size)

    def paint_cuboid(self, width, height, depth):
        return _gl_gui.GLVisualisation_paint_cuboid(self, width, height, depth)

    def paint_circle(self, size, steps=12):
        return _gl_gui.GLVisualisation_paint_circle(self, size, steps)

    def paint_sphere(self, size, steps=12):
        return _gl_gui.GLVisualisation_paint_sphere(self, size, steps)

    def _print(self, x, y, z, string, small_font=False):
        return _gl_gui.GLVisualisation__print(self, x, y, z, string, small_font)

    def get_key(self):
        return _gl_gui.GLVisualisation_get_key(self)

    def get_texture(self, id):
        return _gl_gui.GLVisualisation_get_texture(self, id)
GLVisualisation_swigregister = _gl_gui.GLVisualisation_swigregister
GLVisualisation_swigregister(GLVisualisation)

# This file is compatible with both classic and new-style classes.


